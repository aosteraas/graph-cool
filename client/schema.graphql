schema {
  query: AppQuery
  mutation: AppMutation
}

type AppMutation {
  createUser(user: UserInput!): User
}

type AppQuery {
  # All comments on a given image
  commentsForImage(
    # The Image's Id
    imageId: ID!
  ): [Comment]
  # All comments from a given user
  commentsForUser(
    # The User's Id
    userId: ID!
  ): [Comment]
  # A single image
  getImage(
    # The Image's Id
    imageId: ID!
  ): Image
  # All Images
  getImages: [Image]
  # A User of BagelGram
  getUser(
    # The User's Id
    id: ID!
  ): User
  # All Users of BagelGram
  getUsers: [User]
  # All Images for a User
  imagesForUser(
    # The User's Id
    userId: ID!
  ): [Image]
}

scalar BigInt

scalar Byte

type Comment {
  # The Comment ID
  id: ID
  # The image the comment belongs to
  image: Image
  # The text of the comment
  text: String!
  # The User who wrote the comment
  user: User
}

# The `Date` scalar type
# represents a year, month and day in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

# The `DateTime` scalar type
# represents a date and time. `DateTime` expects
# timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

# The `DateTimeOffset` scalar type
# represents a date, time and offset from UTC.
# `DateTimeOffset` expects timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTimeOffset

scalar Decimal

scalar Guid

type Image {
  # The Image ID
  id: ID
  # The source url of the image
  source: String!
  # The user who uploaded the image
  user: User
}

scalar Long

# The `Milliseconds` scalar type
# represents a period of time represented as the total number of milliseconds.
scalar Milliseconds

scalar SByte

# The `Seconds` scalar type
# represents a period of time represented as the total number of seconds.
scalar Seconds

scalar Short

scalar UInt

scalar ULong

scalar Uri

type User {
  # Comments the user has made
  comments: [Comment]
  # The User ID
  id: ID
  # The User's images
  images: [Image]
  # The User's display name
  userName: String!
}

input UserInput {
  userName: String!
  birthDate: String!
}

scalar UShort
